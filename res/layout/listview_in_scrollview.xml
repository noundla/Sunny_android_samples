<?xml version="1.0" encoding="utf-8"?>
<com.vl.samples.scrollview.CustomScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical" >
        <TextView
            android:id="@+id/textView1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text=" ListView. \n The display of elements in a lists is a very common pattern in mobile applications. The user sees a list of items and can scroll through them. If he selects one of the list item, this can update the ActionBar or triggers a detailed screen for the selection.Android provides the ListView class which is capable of displaying a scrollable list of items. These items can be of any type. " />
		 <!-- height should be fixed value -->
        <ListView
            android:id="@+id/listView1"
            android:layout_width="match_parent"
            android:layout_height="150dp" >
        </ListView>

        <TextView
            android:id="@+id/textView1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Layout container for a view hierarchy that can be scrolled by the user, allowing it to be larger than the physical display. A ScrollView is a FrameLayout, meaning you should place one child in it containing the entire contents to scroll; this child may itself be a layout manager with a complex hierarchy of objects. A child that is often used is a LinearLayout in a vertical orientation, presenting a vertical array of top-level items that the user can scroll through.

You should never use a ScrollView with a ListView, because ListView takes care of its own vertical scrolling. Most importantly, doing this defeats all of the important optimizations in ListView for dealing with large lists, since it effectively forces the ListView to display its entire list of items to fill up the infinite container supplied by ScrollView.

The TextView class also takes care of its own scrolling, so does not require a ScrollView, but using the two together is possible to achieve the effect of a text view within a larger container.

ScrollView only supports vertical scrolling. For horizontal scrolling, use HorizontalScrollView." />

        <TextView
            android:id="@+id/textView1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Listview can scroll inside scrollview.. Listview can scroll inside scrollview.. Listview can scroll inside scrollview.. Listview can scroll inside scrollview.. Listview can scroll inside scrollview.. Listview can scroll inside scrollview..Listview can scroll inside scrollview.." />

        <TextView
            android:id="@+id/textView1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Listview can scroll inside scrollview.. Listview can scroll inside scrollview.. Listview can scroll inside scrollview.. Listview can scroll inside scrollview.. Listview can scroll inside scrollview.. Listview can scroll inside scrollview..Listview can scroll inside scrollview.." />
    </LinearLayout>

</com.vl.samples.scrollview.CustomScrollView>